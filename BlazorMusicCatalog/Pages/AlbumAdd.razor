@page "/albumadd"
@page "/albumadd/{id:int}"
@inject NavigationManager NavigationManager
@inject IAlbumService AlbumService

@if (album == null)
{
    <p><em>Loading....</em></p>
}
else
{
    <EditForm Model="@album">

        <table class="table">
            <tr>
                <td>Title</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Title"></InputText></td>
            </tr>
            <tr>
                <td>Cover</td>
                <td><InputFile OnChange="LoadAlbumCover"></InputFile></td>
            </tr>
            <tr>
                <td>Description</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Description"></InputText></td>
            </tr>
            <tr>
                <td>Release Date</td>
                <td><InputDate class="form-control col-sm-5" @bind-Value="@album.ReleaseDate"></InputDate></td>
            </tr>
            <tr>
                <td>Author</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Author"></InputText></td>
            </tr>
        </table>

        <h3>Songs <button @onclick="AddSong">+</button></h3>

        @foreach (var song in album.Songs)
        {
            <SongBlock Song="song" OnSongChanged="UpdateAddedSong" OnSongRemoved="RemoveSong"></SongBlock>
        }

        <table class="table">
            <tr>
                <td colspan="2" class="text-center">
                    <input type="submit" class="btn btn-success" value="Save" @onclick="AlbumSave" />
                </td>
                <td class="text-center">
                    <input type="submit" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                </td>
                @if (id > 0)
                {
                    <td class="text-center">
                        <input type="submit" class="btn btn-danger" value="Remove" @onclick="AlbumRemove" />
                    </td>
                }
            </tr>
        </table>

    </EditForm>


}

@code {

    [Parameter]
    public int id { get; set; }

    public Album album;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (id > 0)
            {
                album = await AlbumService.GetAlbumDetails(id);
            }
            else
            {
                Album album = new Album()
                {
                    ReleaseDate = DateTime.Now,
                    Songs = new List<Song>()
                };
                album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
            }


        }
        catch (Exception)
        {

            throw;
        }
    }

    public void AddSong()
    {
        album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
    }

    protected async Task AlbumRemove()
    {
        await AlbumService.DeleteAlbum(album);
    }

    public async void UpdateAddedSong(Song song)
    {
        var songToUpdate = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        if (songToUpdate != null)
        {
            songToUpdate.Extesion = song.Extesion;
            songToUpdate.Name = song.Name;
            songToUpdate.Path = song.Path;
        }
    }

    protected void RemoveSong(Song song)
    {
        var sonToRemove = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        album.Songs.Remove(sonToRemove);
    }

    async Task LoadAlbumCover(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedFile = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedFile.Size];

        await resizedFile.OpenReadStream().ReadAsync(buffer);

        album.CoverImage = buffer;

    }

    protected async Task AlbumSave()
    {
        if (id > 0)
            await AlbumService.UpdateAlbum(album);
        else
            await AlbumService.InsertAlbum(album);
        NavigateToHome();
    }

    public void Cancel()
    {
        NavigateToHome();
    }

    public void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
