@page "/albumadd"
@inject NavigationManager NavigationManager

@if (album == null)
{
    <p><em>Loading....</em></p>
}
else
{
    <EditForm Model="@album">

        <table class="table">
            <tr>
                <td>Title</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Title"></InputText></td>
            </tr>
            <tr>
                <td>Description</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Description"></InputText></td>
            </tr>
            <tr>
                <td>Release Date</td>
                <td><InputDate class="form-control col-sm-5" @bind-Value="@album.ReleaseDate"></InputDate></td>
            </tr>
            <tr>
                <td>Author</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Author"></InputText></td>
            </tr>
        </table>

        <h3>Songs <button @onclick="AddSong">+</button></h3>

        @foreach (var song in album.Songs)
        {
            <SongBlock Song="song" OnSongChange="UpdateAddedSong"></SongBlock>
        }

        <table class="table">
            <tr>
                <td colspan="2" style="text-align:center">
                    <input type="submit" value="Save" @onclick="AlbumSave" />
                    <input type="submit" value="Cancel" @onclick="Cancel"/>
                </td>
            </tr>
        </table>

    </EditForm>


}

@code {
    public Album album = new Album { Songs = new List<Song>() };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void AddSong()
    {
        album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
    }

    public async void UpdateAddedSong(Song song)
    {
        var songToUpdate = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        if (songToUpdate != null)
        {
            songToUpdate.Extesion = song.Extesion;
            songToUpdate.Name = song.Name;
            songToUpdate.Path = song.Path;
        }
    }

    protected async Task AlbumSave()
    {
        var a = album.Songs;
    }

    public void Cancel()
    {
        NavigateToHome();
    }

    public void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
